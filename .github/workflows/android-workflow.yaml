# This is a basic android workflow
# Now, we'll define the jobs we need in the current workflow.
# Runner's file system doesn't have the code yet! So, we need to check out
# the code from the current repository and set up the Java environment in the runner.

# Here we've used actions/checkout@v1 and actions/setup-java@v1 to checkout the current
# GitHub repository and setup Java Development Kit in runner respectively.
# The third step prints the contents of current working directory.

name: CI Workflow
on: [ push ]

jobs:
  build-and-test:
    name: Build and run tests
    runs-on: macos-latest # Switched from ubuntu-latest
    steps:
      - name: Checkout current repository in ubuntu's file system
        uses: actions/checkout@v1

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Print contents in current directory
        run: ls -la

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

        # To execute the instrumentation tests, we need an Android device and custom runner.
        # Luckily, there's an Android emulator available. We have to use macOS runner
        # We used reactivecircus/android-emulator-runner@v2 to spawn an Android emulator
        # inside the macOS runner
        # After push our tests are going to execute, and we'll find .html and .xml files
        # inside app/build/reports. These contain the test results and summaries.
        # To upload these files as artifacts (Files like APKs, screenshots, test reports, logs and so on,
        # which the workflow generates. Upload / download artifact to the current workflow -->
        # actions/upload-artifact@v2 / actions/download-artifact@v2 (requires path where the files to be uploaded are located)),
        # right after instrumentation tests step,
        # we are going to add another step to define an action actions/upload-artifact@v1.

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86
          profile: Nexus 6
          avd-name: test
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck

      - name: Upload Reports
        uses: actions/upload-artifact@v1
        with:
          name: reports
          path: app/build/reports
